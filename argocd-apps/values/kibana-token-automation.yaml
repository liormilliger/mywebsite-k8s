apiVersion: v1
kind: ServiceAccount
metadata:
  name: kibana-token-creator-sa
  namespace: logging
---
# Permissions for the Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kibana-token-creator-role
  namespace: logging
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
---
# Bind the permissions to the Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kibana-token-creator-binding
  namespace: logging
subjects:
- kind: ServiceAccount
  name: kibana-token-creator-sa
  namespace: logging
roleRef:
  kind: Role
  name: kibana-token-creator-role
  apiGroup: rbac.authorization.k8s.io
---
# The Job to create the token
apiVersion: batch/v1
kind: Job
metadata:
  name: create-kibana-token
  namespace: logging
  annotations:
    # Tell ArgoCD to run this during the sync phase
    argocd.argoproj.io/hook: Sync
    # Tell ArgoCD to delete this Job after it succeeds
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: kibana-token-creator-sa
      restartPolicy: OnFailure
      containers:
      - name: token-creator
        image: bitnami/kubectl:1.27
        command:
        - "/bin/sh"
        - "-c"
        - |
          set -e
          # First, check if the secret already exists. If so, do nothing.
          if kubectl get secret kibana-es-token -n logging > /dev/null 2>&1; then
            echo "Kibana token secret already exists. Exiting."
            exit 0
          fi

          echo "Waiting for Elasticsearch pod to be ready..."
          # --- THIS IS THE UPDATED LINE ---
          kubectl wait --for=condition=Ready pod \
            -l app=elasticsearch-master \
            -n logging --timeout=300s
          # --------------------------------

          echo "Waiting for Elasticsearch pod..."
          ES_POD=$(kubectl get pod -l app=elasticsearch-master -n logging -o jsonpath='{.items[0].metadata.name}')
          
          echo "Generating token inside pod $ES_POD..."
          TOKEN=$(kubectl exec -n logging $ES_POD -- \
            /usr/share/elasticsearch/bin/elasticsearch-service-tokens create elastic/kibana kibana-token | \
            grep
